
231107 진행과정



파이참 플라스크에서 mysql에 연동하여 데이터를 넣으려고하였으나 오류가 발생함


[파이참 오류 메세지]

Traceback (most recent call last):
  File "C:\jey\pythonProject1\study\test.py", line 18, in <module>
    cur.execute(sql_statement,tupled_list)
  File "C:\jey\pythonProject1\lib\site-packages\MySQLdb\cursors.py", line 179, in execute
    res = self._query(mogrified_query)
  File "C:\jey\pythonProject1\lib\site-packages\MySQLdb\cursors.py", line 330, in _query
    db.query(q)
  File "C:\jey\pythonProject1\lib\site-packages\MySQLdb\connections.py", line 255, in query
    _mysql.connection.query(self, query)
MySQLdb.OperationalError: (1366, "Incorrect integer value: '''' for column 'total_cases' at row 1")



주어진 데이터가 데이터베이스 테이블의 열에 맞지 않는 데이터라는 것을 의미하는것 같음
(mysql에서는 칼럼이 int인데 데이터를 str 문자열로 인식되어 그런것같음)


[파이참 수정코드]

from flask import Flask, render_template, jsonify
import csv
import MySQLdb
import datetime


app = Flask(__name__)

# list =[]
with open('KOR.csv') as csvfile:
    reader = csv.DictReader(csvfile, delimiter=',')
    for  idx,row in enumerate(reader):
        conn = MySQLdb.connect(host="localhost", port=3306, user="root", passwd="1234", db="a")
        # 17개 시도
        sql_statement = 'INSERT INTO kor_tbl (date_day,total_cases, total_deaths,total_vaccinations ) VALUES (%s,%s, %s,%s)'

        # 'date_day' 칼럼을 날짜로 변환
        # date_day = datetime.datetime.strptime(row['date_day'], '%Y-%m-%d').date()

        cur = conn.cursor()
        tupled_list= ((row['date_day']),int(row['total_cases']),int(row['total_deaths']),int(row['total_vaccinations']))
        cur.execute(sql_statement,tupled_list)
        conn.escape_string(sql_statement)
        conn.commit()
        if idx%100==0:
            print("진행중 ==========================="+str(idx))


@app.route('/')
def hello():
    return render_template('index2.html', data='성공했어요')


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)


그래서 파이참 코드에서 문자열로 인식되는 부분을 int로 감싸서 정수형으로 인식되게 변경하였음
혹시 몰라서 엑셀파일에 빈공간도 문자열로 인식될수있어서 빈공간을 0으로 변경함



-----------------------------------------------------------------------------------------------------------



전체 country의 나라를 팀원들과 나라별로 나눠서 각자 다시 정리함
나는 그중에서 아시아부분을 중동,한국,일본,중국,홍콩,그외 아시아 로 통합하는 분류작업을 함

MAS = ['Afghanistan','Bahrain','Kuwait','Saudi Arabia',]
KOR = ['South Korea']
JPN = ['Japan']
CHN = ['China']
HKO = ['Hong Kong']
ASIA = ['Armenia','Azerbaijan','Bangladesh','Bhutan','Brunei','Cambodia','Georgia','India','Indonesia','Iran','Iraq','Israel','Jordan',
      'Kazakhstan','Kyrgyzstan','Laos','Lebanon','Macao','Malaysia','Maldives','Myanmar','Nepal','Northern Cyprus','Oman','Pakistan',
      'Palestine','Philippines','Qatar','Singapore','Sri Lanka','Syria','Taiwan','Tajikistan','United Arab Emirates','Uzbekistan','Vietnam','Yemen']
# 중동,한국,일본,중국,홍콩을 제외한 나라는 아시아로 통합하여 분류하였고 
# 중국에 속하지만 마카오는 아시아로 분류함

-----------------------------------------------------------------------------------------------------------


팀원끼리 정리한 액셀데이터를 토대로 아메리카를 파이참에서 플라스크를 이용하여 
mysql로 보내 데이터를 저장하려고 테스트하였으나
전체 데이터가 들어가지않고 일부데이터만 들어가면서 오류메세지가 뜨는걸로 확인됨

[파이참 오류메세지]

Traceback (most recent call last):
  File "C:\jey\pythonProject1\study\test.py", line 14, in <module>
    conn = MySQLdb.connect(host="localhost", port=3306, user="root", passwd="1234", db="a")
  File "C:\jey\pythonProject1\lib\site-packages\MySQLdb\__init__.py", line 121, in Connect
    return Connection(*args, **kwargs)
  File "C:\jey\pythonProject1\lib\site-packages\MySQLdb\connections.py", line 193, in __init__
    super().__init__(*args, **kwargs2)
MySQLdb.OperationalError: (2002, "Can't connect to server on 'localhost' (10048)")


그러하여 우리팀은 이러한 오류가 왜 생기는지 알아봄

외부 데이터 (csv) 파일을 읽어서 파이썬 code를 활용하여  mysql 에 저장하는 과정에서 오류 발생
원인: 시스템 용량 부족(메모리 부족 현상)
해결책:파일을 10000개씩 분할하여 여러개의 파일로 생성하여 DB에 저장함 ( 이부분은 진행중)

-----------------------------------------------------------------------------------------------------------

그래서 비교적 데이터가 적은 한국의 데이터로 실행한 결과
mysql에 데이터가 잘 저장되지만 두번실행되면서 중복 저장되는것이 확인됨

[파이참 메세지]

* Serving Flask app 'test'
 * Debug mode: on
WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://192.168.0.156:5000
Press CTRL+C to quit
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 868-707-408


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)


그래서 Debug mode가 on이어서 한번더 실행되는것 같아 
코드의 debug=True 부분을 debug=False로 변경하였더니 DB에 정상적으로 데이터가 저장되는것을 확인


-----------------------------------------------------------------------------------------------------------

Chat GPT에 이유를 검색해본 결과

[GPT 답변]

Flask는 파이썬을 사용하여 웹 애플리케이션을 구축하는 데 널리 사용되는 웹 프레임워크입니다. debug=True로 Flask 애플리케이션을 시작하면 개발 모드가 활성화되며, 이는 예기치 않은 동작을 초래할 수 있는데, 이중 데이터베이스 삽입과 같은 문제를 야기할 수 있습니다.

debug=True로 개발 모드가 활성화된 상태에서는 Flask의 개발 서버가 사용됩니다. 이 서버에는 개발에 편리한 기능이 있지만 프로덕션에서 문제를 일으킬 수 있습니다. 이 중 하나는 코드에 변경 사항이 감지될 때 자동으로 다시로드되는 기능입니다. 서버가 다시 시작되면 코드가 다시 실행되며, 코드가 함수나 라우트 핸들러 내부가 아닌 전역 스코프에서 데이터베이스 삽입 작업을 직접 수행하면 여러 번 삽입될 수 있습니다.

debug=False로 설정하면 개발 서버의 자동 다시로드 기능이 꺼집니다. 이렇게 하면 Flask 애플리케이션이 자동 다시로드 기능을 사용하지 않고 실행됩니다. 결과적으로 데이터베이스 삽입 작업이 중복되지 않습니다.

debug=True로 Flask 애플리케이션을 개발 모드에서 실행할 때 데이터베이스 삽입이 여러 번 발생하지 않으려면 데이터베이스 삽입 작업이 루트 핸들러나 함수 내에 캡슐화되어 있고 스크립트의 전역 범위에 직접 있지 않도록 해야 합니다. 이렇게 하면 특정 라우트에 액세스할 때만 실행되며 개발 서버가 다시 시작될 때 트리거되지 않습니다.



위 답변을 토대로 다음날 debug=True로 실행할때 데이터베이스 삽입이 중복되지 않게 할수있는 방법을 찾아보려고 함


